library(coil20)
install.packages("coil20")
devtools::install_github("jlmelville/coil20")
library(coil20)
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/03-unsupervised/src/coil20.rds')
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/03-unsupervised/src/coil20.rds')
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/03-unsupervised/src/coil20.rds')
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
library(coil20)
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
setwd("~/MEGA/docencia/curso-ml-JAE/docs/sesion_03")
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
show_object(coil20, object = 4, pose = 0)
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
library(coil20)
# coil20 <- download_coil20(verbose = TRUE)  # Tarda unos 3 min, solo hacerlo la primera vez
# Para que vaya más rápido, cargamos uno ya descargado antes
# saveRDS(coil20, file = "coil20.rds")
coil20 <- readRDS(file = 'exercises/src/coil20.rds')
knitr::opts_chunk$set(echo = TRUE)
show_digit = function(arr784, col = gray(12:1 / 12), ...) {
image(matrix(as.matrix(arr784[-785]), nrow = 28)[, 28:1], col = col, ...)
}
load_image_file = function(filename) {
ret = list()
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n    = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
nrow = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
ncol = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
x = readBin(f, 'integer', n = n * nrow * ncol, size = 1, signed = FALSE)
close(f)
data.frame(matrix(x, ncol = nrow * ncol, byrow = TRUE))
}
load_label_file = function(filename) {
f = file(filename, 'rb')
readBin(f, 'integer', n = 1, size = 4, endian = 'big')
n = readBin(f, 'integer', n = 1, size = 4, endian = 'big')
y = readBin(f, 'integer', n = n, size = 1, signed = FALSE)
close(f)
y
}
test  = load_image_file("src/t10k-images.idx3-ubyte")
test$y  = as.factor(load_label_file("src/t10k-labels.idx1-ubyte"))
dim(test)
show_digit(test[1, ])
proy_pca <- prcomp(test[, 1:28^2], retx = T) ## Ojo, quitar LABEL, sino son trampas
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type = 'n')
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type = 'n')
proy_pca$x[, 1:2]
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2])
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
plot(proy_pca$x[, 1:2])
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
plot(proy_pca$x[, 1:2], type="n")
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
png(filename="mnist_pca.png")
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type="n")
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
dev.off()
png(filename="mnist_pca.png", res=600)
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type="n")
png(filename="mnist_pca.png", res=300)
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type="n")
png(filename="mnist_pca.png")
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type="n")
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
dev.off()
jpeg(filename="mnist_pca.jpg", res=600)
# Representamos las dos primeras componentes
plot(proy_pca$x[, 1:2], type="n")
plot(proy_pca$x[, 1:2], type="n")
text(proy_pca$x[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
xaringan:::inf_mr()
library(Rtsne)
install.packages("Rtsne")
library(Rtsne)
proy_tsne <- Rtsne(test[, 1:28^2], num_threads = 16)
proy_tsne <- Rtsne(test[, 1:28^2], num_threads = 16)
plot(proy_tsne$Y[, 1:2], type = 'n')
text(proy_tsne$Y[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
plot(proy_tsne$Y[, 1:2], type = 'n')
text(proy_tsne$Y[, 1:2], labels = test$y, cex = 0.5,
col = rainbow(length(levels(test$y)))[test$y])
